{"version":3,"sources":["form/InputFormField.tsx","form/TextAreaFormField.tsx","form/validation.tsx","api/posts.ts","sections/CreateBlogPostForm.tsx","pages/CreateBlogPostPage.tsx","containers/BlogPostContainer.tsx","sections/DisplayBlogPost.tsx","pages/ListBlogPostPage.tsx","sections/ListPosts.tsx","containers/BlogPostsContainer.tsx","pages/ListBlogPostsPage.tsx","sections/Navigation.tsx","App.tsx","index.tsx"],"names":["InputFormField","input","meta","label","Form","Field","error","submitFailed","content","pointing","undefined","control","Input","TextAreaFormField","TextArea","valueIsEmpty","value","isNil","isString","trim","notEmpty","message","hasMaxLength","maxLength","actualMessage","isFunction","length","validate","validationRules","values","Object","entries","reduce","acc","currentRuleSet","ruleKey","rules","currentValue","currentRules","allErrors","map","validator","filter","_","first","runValidators","a","axios","get","response","status","type","data","postId","post","delete","CreateBlogPostForm","history","useHistory","onSubmit","postPost","then","newPost","console","log","push","id","subscription","submitting","hasValidationErrors","pristine","header","preamble","body","author","email","test","date","render","handleSubmit","form","loading","name","component","Group","Button","onClick","reset","disabled","CreateBlogPost","Container","Header","Segment","BlogPostContainer","props","useState","postData","setPost","params","useParams","useEffect","getPost","parseInt","ListPosts","Loader","active","inline","text","Card","Description","Meta","as","primary","deletePost","ListBlogPostPage","DisplayBlogPost","postsData","List","divided","relaxed","Item","Icon","size","verticalAlign","Content","exact","to","NavLink","BlogPostsContainer","setPosts","getPosts","ListBlogPostsPage","Navigation","Menu","App","Grid","Row","columns","Column","Divider","path","CreateBlogPostPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3c3f2dac.chunk.js","sourcesContent":["import React from 'react'\nimport { Input, Form } from 'semantic-ui-react'\n\nconst InputFormField = ({ input, meta, label }: any) => {\n  return (\n    <Form.Field\n      error={\n        meta.submitFailed && meta.error\n          ? {\n              content: meta.error,\n              pointing: 'below',\n            }\n          : undefined\n      }\n      control={Input}\n      label={label}\n      {...input}></Form.Field>\n  )\n}\nexport default InputFormField\n","import React from 'react'\nimport { TextArea, Form } from 'semantic-ui-react'\n\nconst TextAreaFormField = ({ input, meta, label }: any) => {\n  return (\n    <Form.Field\n      error={\n        meta.submitFailed && meta.error\n          ? {\n              content: meta.error,\n              pointing: 'below',\n            }\n          : undefined\n      }\n      control={TextArea}\n      label={label}\n      {...input}></Form.Field>\n  )\n}\n\nexport default TextAreaFormField\n","import { isFunction, first, isNil, isString } from 'lodash/fp'\n\ntype Value = string | number | undefined\n\ntype Rule = (value?: Value) => String | undefined\n\ntype MessageFunction = (numOfChars: any) => string\n\ntype Message = String\n\nconst valueIsEmpty: (value: any) => boolean = (value: Value) =>\n  isNil(value) || (isString(value) && value.trim() === '')\n\nexport const notEmpty = (message?: string): Rule => (value: Value) => {\n  return valueIsEmpty(value) ? (!!message ? message : 'Need to be entered.') : undefined\n}\n\nexport const hasMaxLength = (message?: Message | MessageFunction) => (maxLength: number): Rule => (\n  value: Value,\n) => {\n  const actualMessage = isFunction(message) ? message(maxLength) : message\n  const hasError = !valueIsEmpty(value) && isString(value) && value.length >= maxLength\n\n  return hasError\n    ? actualMessage\n      ? actualMessage\n      : `Need to be less than ${maxLength} characters`\n    : undefined\n}\n\nexport const isEmailAddress = (message?: string): Rule => (value: Value) => {\n  const EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n  const hasError = !valueIsEmpty(value) && isString(value) && !EMAIL_REGEX.test(value)\n\n  return hasError ? (message ? message : 'The email address is not valid') : undefined\n}\n\nconst runValidators = (currentRules: Rule[], value: Value) => {\n  const allErrors = currentRules.map((validator) => validator(value)).filter((_) => _)\n  return first(allErrors)\n}\n\nexport const validate: (\n  validationRules: Record<string, Rule[]>,\n) => (values: Record<string, Value>) => Record<string, Value> = (validationRules) => (\n  values: Record<string, Value>,\n) => {\n  return Object.entries(validationRules).reduce((acc, currentRuleSet) => {\n    const [ruleKey, rules] = currentRuleSet\n    const currentValue: Value = values[ruleKey]\n    return {\n      ...acc,\n      [ruleKey]: runValidators(rules, currentValue),\n    }\n  }, {})\n}\n","import axios from 'axios'\nimport { RemoteData, BlogPost, PostId } from '../types'\n\nexport async function getPosts(): Promise<RemoteData<Error, BlogPost[]>> {\n  try {\n    const response = await axios.get('https://retoolapi.dev/xQQK5j/posts??_sort=date&_order=asc')\n\n    if (response.status > 299) throw await response\n\n    return { type: 'SUCCESS', data: response.data }\n  } catch (e) {\n    return { type: 'FAILURE', error: e }\n  }\n}\n\nexport async function getPost(postId: PostId): Promise<RemoteData<Error, BlogPost>> {\n  try {\n    const response = await axios.get(`https://retoolapi.dev/xQQK5j/posts/${postId}`)\n\n    if (response.status > 299) throw await response\n\n    return { type: 'SUCCESS', data: response.data }\n  } catch (e) {\n    return { type: 'FAILURE', error: e }\n  }\n}\n\nexport async function postPost(data: BlogPost): Promise<RemoteData<Error, BlogPost>> {\n  try {\n    const response = await axios.post(`https://retoolapi.dev/xQQK5j/posts`, data)\n\n    if (response.status > 299) throw await response\n\n    return { type: 'SUCCESS', data: response.data }\n  } catch (e) {\n    return { type: 'FAILURE', error: e }\n  }\n}\n\nexport async function deletePost(postId: PostId): Promise<RemoteData<Error, {}>> {\n  try {\n    const response = await axios.delete(`https://retoolapi.dev/xQQK5j/posts/${postId}`)\n\n    if (response.status > 299) throw await response\n\n    return { type: 'SUCCESS', data: response.data }\n  } catch (e) {\n    return { type: 'FAILURE', error: e }\n  }\n}\n","import React from 'react'\nimport { Button, Form as SForm } from 'semantic-ui-react'\nimport { Form, Field } from 'react-final-form'\nimport { useHistory } from 'react-router'\nimport { BlogPost } from '../types'\n\nimport {\n  InputFormField,\n  TextAreaFormField,\n  validate,\n  notEmpty,\n  hasMaxLength,\n  isEmailAddress,\n} from '../form'\nimport { postPost } from '../api/posts'\n\nconst CreateBlogPostForm = () => {\n  let history = useHistory()\n\n  const onSubmit = ({ ...values }: BlogPost) => {\n    return postPost(values).then((newPost) => {\n      console.log({ newPost })\n      if (newPost.type === 'SUCCESS') history.push(`/post/${newPost.data.id}`)\n    })\n  }\n  return (\n    <Form\n      onSubmit={onSubmit}\n      subscription={{\n        submitting: true,\n        hasValidationErrors: true,\n        pristine: true,\n      }}\n      validate={validate({\n        header: [notEmpty(), hasMaxLength()(50)],\n        preamble: [notEmpty(), hasMaxLength()(250)],\n        body: [notEmpty()],\n        author: [notEmpty()],\n        email: [notEmpty(), isEmailAddress()],\n        date: [notEmpty()],\n      })}\n      render={({ handleSubmit, form, submitting, pristine }) => {\n        return (\n          <SForm loading={submitting} onSubmit={handleSubmit}>\n            <Field label=\"Header\" name=\"header\" component={InputFormField}></Field>\n            <Field\n              label=\"Preamble\"\n              type=\"text\"\n              name=\"preamble\"\n              component={TextAreaFormField}></Field>\n            <Field label=\"Text\" type=\"text\" name=\"body\" component={TextAreaFormField}></Field>\n            <Field label=\"Author\" type=\"text\" name=\"author\" component={InputFormField}></Field>\n            <Field label=\"Email\" type=\"email\" name=\"email\" component={InputFormField}></Field>\n            <Field label=\"Date\" type=\"date\" name=\"date\" component={InputFormField}></Field>\n            <SForm.Group>\n              <SForm.Field control={Button} type=\"submit\">\n                Create\n              </SForm.Field>\n              <Button type=\"button\" onClick={() => form.reset} disabled={submitting || pristine}>\n                Reset\n              </Button>\n            </SForm.Group>\n          </SForm>\n        )\n      }}\n    />\n  )\n}\n\nexport default CreateBlogPostForm\n","import React from 'react'\nimport { Header, Container, Segment } from 'semantic-ui-react'\n\nimport CreateBlogPostForm from '../sections/CreateBlogPostForm'\n\nconst CreateBlogPost = () => {\n  return (\n    <Container>\n      <Header>Create post</Header>\n      <Segment>\n        <CreateBlogPostForm></CreateBlogPostForm>\n      </Segment>\n    </Container>\n  )\n}\n\nexport default CreateBlogPost\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport { getPost } from '../api/posts'\nimport { BlogPost, RemoteData } from '../types'\n\ntype Props = {\n  render: (props: { postData: RemoteData<Error, BlogPost> }) => React.ReactElement\n}\n\nconst BlogPostContainer = (props: Props) => {\n  const [postData, setPost] = useState<RemoteData<Error, BlogPost>>({\n    type: 'NOT_ASKED',\n  })\n  const params = useParams<{ id?: string }>()\n\n  useEffect(() => {\n    if (postData.type === 'NOT_ASKED' && params.id) {\n      setPost({ type: 'LOADING' })\n      getPost(parseInt(params.id)).then(setPost)\n    }\n  }, [postData.type, params.id])\n\n  return props.render({ postData })\n}\n\nexport default BlogPostContainer\n","import React from 'react'\nimport { useHistory } from 'react-router'\nimport { Button, Card, Container, Header, Loader } from 'semantic-ui-react'\nimport { deletePost } from '../api/posts'\nimport { BlogPost, RemoteData } from '../types'\n\ntype Props = {\n  postData: RemoteData<Error, BlogPost>\n}\n\nconst ListPosts = ({ postData }: Props) => {\n  let history = useHistory()\n\n  switch (postData.type) {\n    case 'NOT_ASKED':\n      return <p>Not asked</p>\n    case 'LOADING':\n      return (\n        <Loader active inline=\"centered\">\n          Loading\n        </Loader>\n      )\n    case 'SUCCESS':\n      return (\n        <>\n          <Container text>\n            <Card>\n              <Card.Description>{postData.data.email}</Card.Description>\n              <Card.Meta>{postData.data.date}</Card.Meta>\n              <Card.Header>{postData.data.author}</Card.Header>\n            </Card>\n            <Header as=\"h2\">{postData.data.header}</Header>\n            <p>{postData.data.body}</p>\n            <Button\n              primary\n              onClick={() => deletePost(postData.data.id).then(() => history.push('/'))}>\n              Delete\n            </Button>\n          </Container>\n        </>\n      )\n\n    case 'FAILURE':\n      return <p>Failed load the post</p>\n  }\n}\nexport default ListPosts\n","import React from 'react'\nimport { Container, Header, Segment } from 'semantic-ui-react'\nimport BlogPostContainer from '../containers/BlogPostContainer'\nimport DisplayBlogPost from '../sections/DisplayBlogPost'\n\nconst ListBlogPostPage = () => {\n  return (\n    <Container>\n      <Header>Post</Header>\n      <Segment>\n        <BlogPostContainer\n          render={({ postData }) => {\n            return <DisplayBlogPost postData={postData}></DisplayBlogPost>\n          }}\n        />\n      </Segment>\n    </Container>\n  )\n}\n\nexport default ListBlogPostPage\n","import React from 'react'\nimport { List, Loader } from 'semantic-ui-react'\nimport { BlogPost, RemoteData } from '../types'\nimport { NavLink } from 'react-router-dom'\n\ntype Props = {\n  postsData: RemoteData<Error, BlogPost[]>\n}\n\nconst ListPosts = ({ postsData }: Props) => {\n  switch (postsData.type) {\n    case 'NOT_ASKED':\n      return <p>Not asked</p>\n    case 'LOADING':\n      return (\n        <Loader active inline=\"centered\">\n          Loading\n        </Loader>\n      )\n\n    case 'SUCCESS':\n      return (\n        <List divided relaxed>\n          {postsData.data.map((post) => (\n            <List.Item key={post.id}>\n              <List.Icon name=\"github\" size=\"large\" verticalAlign=\"middle\" />\n              <List.Content>\n                <List.Header exact to={`post/${post.id}`} as={NavLink}>\n                  {post.header}\n                </List.Header>\n                <List.Description exact to={`post/${post.id}`} as={NavLink}>\n                  {post.date}\n                </List.Description>\n              </List.Content>\n            </List.Item>\n          ))}\n        </List>\n      )\n    case 'FAILURE':\n      return <p>Failed load the posts</p>\n  }\n}\nexport default ListPosts\n","import { useEffect, useState } from 'react'\nimport { getPosts } from '../api/posts'\nimport { BlogPost, RemoteData } from '../types'\n\ntype Props = {\n  render: (props: { postsData: RemoteData<Error, BlogPost[]> }) => React.ReactElement\n}\nconst BlogPostsContainer = (props: Props) => {\n  const [postsData, setPosts] = useState<RemoteData<Error, BlogPost[]>>({\n    type: 'NOT_ASKED',\n  })\n\n  useEffect(() => {\n    if (postsData.type === 'NOT_ASKED') {\n      setPosts({ type: 'LOADING' })\n      getPosts().then(setPosts)\n    }\n  }, [postsData.type])\n\n  return props.render({ postsData })\n}\n\nexport default BlogPostsContainer\n","import React from 'react'\nimport { Container, Header, Segment } from 'semantic-ui-react'\nimport ListPosts from '../sections/ListPosts'\nimport BlogPostsContainer from '../containers/BlogPostsContainer'\n\nconst ListBlogPostsPage = () => {\n  return (\n    <Container>\n      <Header>Posts</Header>\n      <Segment>\n        <BlogPostsContainer\n          render={({ postsData }) => {\n            return <ListPosts postsData={postsData}></ListPosts>\n          }}\n        />\n      </Segment>\n    </Container>\n  )\n}\n\nexport default ListBlogPostsPage\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst Navigation = () => (\n  <nav>\n    <Menu>\n      <Menu.Item>\n        <NavLink exact to=\"/\">\n          Home\n        </NavLink>\n      </Menu.Item>\n      <Menu.Item>\n        <NavLink exact to=\"/create-post\">\n          Create post\n        </NavLink>\n      </Menu.Item>\n    </Menu>\n  </nav>\n)\n\nexport default Navigation\n","import React from 'react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { Container, Divider, Grid } from 'semantic-ui-react'\nimport CreateBlogPostPage from './pages/CreateBlogPostPage'\nimport ListBlogPostPage from './pages/ListBlogPostPage'\nimport ListBlogPostsPage from './pages/ListBlogPostsPage'\nimport Navigation from './sections/Navigation'\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Container text>\n        <Grid>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <Navigation></Navigation>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Divider />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Switch>\n                <Route exact path=\"/\" component={ListBlogPostsPage} />\n                <Route path=\"/create-post\" component={CreateBlogPostPage} />\n                <Route path=\"/post/:id\" component={ListBlogPostPage} />\n              </Switch>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}